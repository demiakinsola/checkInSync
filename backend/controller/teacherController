const Teacher = require('../model/teacher');
const bcrypt = require('bcrypt');
const jwt = require("jsonwebtoken");

//sign up controller
const signUp = async (req, res) => {
    const { firstName, lastName, email, password } = req.body;
    if (!firstName || !lastName || !email || !password ) {
        return res.status(400).json({ "message": "all fields required" });
    }
    //check if the teacher already exists in the database
    const existingTeacher = await Teacher.findOne({ email });
    if (existingTeacher) {
        return res.status(409).json({ message: "user already exists" })
    }
    const hashedPassword = await bcrypt.hash(password, 10);
try {
    const newTeacher = await Teacher.create({
        firstName: firstName,
        lastName: lastName,
        email: email,
        password: hashedPassword
    });
    return res.status(200).json({
        status: "success",
        message: "user created successfully",
        data: newTeacher
    })
} catch (err) {
    return res.status(500).json({ message: err.message });
}
};


const logIn = async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ message: "all fields are required" });
  }
  //check if the user exists
  const foundUser = await Teacher.findOne({ email });
  if (!foundUser) {
    return res.status(404).json({ message: "user not found"});
  }
//compare the passwords
  const matchedPasswords = await bcrypt.compare(password, foundUser.password)
  if (matchedPasswords) {
    //create jwts
    const accessToken = jwt.sign(
    { email: foundUser.email },
    process.env.ACCESS_TOKEN_SECRET,
    { expiresIn: "60s" }
    );

    const refreshToken = jwt.sign(
    { email: foundUser.email },
    process.env.REFRESH_TOKEN_SECRET,
    { expiresIn: "1d" }
        )
    //save the refreshToken in the database
    foundUser.refreshToken = refreshToken;
    const savedTeacher = await foundUser.save();
    res.cookie("jwt", refreshToken, {
        httpOnly: true,
        sameSite: "None",
        secure: true,
        maxAge: 24 * 60 * 60 * 1000
    })
    res.json({ accessToken })
  } else {
    return res.status(401);
  }
}



module.exports = { signUp, logIn };